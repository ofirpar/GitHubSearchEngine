{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/bookmarks/bookmarks.component.css","webpack:///./src/app/bookmarks/bookmarks.component.html","webpack:///./src/app/bookmarks/bookmarks.component.ts","webpack:///./src/app/git-repo-info.ts","webpack:///./src/app/github.service.ts","webpack:///./src/app/gitrepos/gitrepo/gitrepo.component.css","webpack:///./src/app/gitrepos/gitrepo/gitrepo.component.html","webpack:///./src/app/gitrepos/gitrepo/gitrepo.component.ts","webpack:///./src/app/gitrepos/gitrepos.component.css","webpack:///./src/app/gitrepos/gitrepos.component.html","webpack:///./src/app/gitrepos/gitrepos.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;ACZyC;AACc;AACW;AACG;AAErE,IAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE;IACpD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,8EAAiB,EAAE;IAC/C,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,iFAAkB,EAAE;CACrD,CAAC;AAMF;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;ACf7B,mB;;;;;;;;;;;ACAA,6iB;;;;;;;;;;;;;;;;;;;;;;;;;ACA0C;AACO;AAOjD;IAGE,sBACU,UAAyB;QAAzB,eAAU,GAAV,UAAU,CAAe;IAChC,CAAC;IAEJ,kCAAW,GAAX;QACE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;IAC/C,CAAC;IATU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAKsB,6DAAa;OAJxB,YAAY,CAUxB;IAAD,mBAAC;CAAA;AAVwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AACe;AACT;AACmB;AACrB;AAC2B;AAChB;AACa;AACrB;AAiBhD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAfrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,8EAAiB;gBACjB,oFAAgB;gBAChB,iFAAkB;aACnB;YACD,OAAO,EAAE;gBACL,uEAAa,EAAE,qEAAgB,EAAE,0DAAW,EAAG,oEAAgB;aAClE;YACD,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,6DAAa,EAAE,QAAQ,EAAG,GAAG,EAAE;aAC1C;YACC,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC5B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;AC1BtB,mB;;;;;;;;;;;ACAA,2d;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACA;AAOlD;IAGE,4BACU,UAAyB;QAAzB,eAAU,GAAV,UAAU,CAAe;IAC/B,CAAC;IAEL,qCAAQ,GAAR;QAAA,iBAMC;QALC,+CAA+C;QAC/C,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,UAAC,IAAI;YAC7C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC5B,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;IACH,CAAC;IAbU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAKsB,6DAAa;OAJxB,kBAAkB,CAe9B;IAAD,yBAAC;CAAA;AAf8B;;;;;;;;;;;;;ACR/B;AAAA;AAAA;IAAA;IAIA,CAAC;IAAD,kBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJ0C;AACO;AACb;AAQrC;IAEI,uBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAE/C;;;OAGG;IACH,mCAAW,GAAX,UAAY,UAAU;QAClB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,+CAA+C,GAAC,UAAU,GAAC,qBAAqB,CAAC;YACxG,IAAI,CACA,0DAAG,CAAC,UAAS,IAAS;YAAI,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAE;YACjD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YAClB,sBAAsB;YACtB,4BAA4B;YAC5B,eAAe;YACf,uBAAuB;YACvB,WAAW;YACX,uBAAuB;YACvB,2BAA2B;YAC3B,4CAA4C;YAC5C,WAAW;YACX,MAAM;QACV,CAAC,CAAC,CACL,CAAC;IACV,CAAC;IAED;;;OAGG;IACH,oCAAY,GAAZ,UAAa,OAAY;QACrB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,aAAG;YACnE,cAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC;QAA3B,CAA2B,CAC9B;aACI,KAAK,CAAC,aAAG;YACN,cAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC;QAAzB,CAAyB,CAC5B,CAAC;QAAA,CAAC;QACH,iDAAiD;IACzD,CAAC;IAED;;OAEG;IACH,qCAAa,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC;YACpC,IAAI,CACA,0DAAG,CAAC,UAAS,IAAS;YAAI,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAE;YACjD,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAS,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAE;gBACrB,MAAM,CAAC,CAAC;gBACR,gBAAgB;gBAChB,IAAI;gBACJ,gBAAgB;gBAChB,oBAAoB;gBACpB,+BAA+B;gBAC/B,IAAI;YACR,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CACL,CAAC;IACV,CAAC;IA5DQ,aAAa;QAHzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAGkC,+DAAU;OAFjC,aAAa,CA6DzB;IAAD,oBAAC;CAAA;AA7DyB;;;;;;;;;;;;ACV1B,mB;;;;;;;;;;;ACAA,qOAAqO,cAAc,6M;;;;;;;;;;;;;;;;;;;;;;;;;ACApK;AAC7B;AAOlD;IAKE;QAHwB,kBAAa,GAAG,IAAI,CAAC;QAClB,oBAAe,GAAG,IAAI,0DAAY,EAAe,CAAC;IAE7D,CAAC;IAEjB,mCAAQ,GAAR;IACA,CAAC;IAED;;OAEG;IACH,mCAAQ,GAAR;QACE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAdiB;QAAjB,2DAAK,CAAC,SAAS,CAAC;kCAAU,0DAAW;qDAAC;IACf;QAAvB,2DAAK,CAAC,eAAe,CAAC;;2DAAsB;IAClB;QAA1B,4DAAM,CAAC,iBAAiB,CAAC;;6DAAmD;IAHlE,gBAAgB;QAL5B,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;SAGxB,CAAC;;OACW,gBAAgB,CAiB5B;IAAD,uBAAC;CAAA;AAjB4B;;;;;;;;;;;;ACR7B,mB;;;;;;;;;;;ACAA,wgD;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACA;AAQlD;IAGI,2BAAoB,UAAyB;QAAzB,eAAU,GAAV,UAAU,CAAe;QAF7C,gBAAW,GAAG,IAAI,KAAK,EAAO,CAAC;IAEkB,CAAC;IAElD,oCAAQ,GAAR;IACA,CAAC;IAED;;OAEG;IACI,uCAAW,GAAlB;QAAA,iBAIC;QAHG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,UAAC,IAAI;YACzD,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IACD;;;OAGG;IACH,oCAAQ,GAAR,UAAS,OAAO;QACZ,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAtBQ,iBAAiB;QAL7B,+DAAS,CAAC;YACP,QAAQ,EAAE,cAAc;;;SAG3B,CAAC;yCAIkC,6DAAa;OAHpC,iBAAiB,CAuB7B;IAAD,wBAAC;CAAA;AAvB6B;;;;;;;;;;;;;ACT9B;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GitreposComponent } from './gitrepos/gitrepos.component';\nimport { BookmarksComponent } from './bookmarks/bookmarks.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'Repos' },\n  { path: 'Repos', component: GitreposComponent },\n  { path: 'Bookmarks', component: BookmarksComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h2>\\n    GitHub Search Web App\\n  </h2>\\n</div>\\n<nav>\\n    <div class=\\\"nav nav-tabs\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\n        <a class=\\\"nav-item nav-link active\\\" id=\\\"nav-home-tab\\\" data-toggle=\\\"tab\\\" role=\\\"tab\\\" routerLink=\\\"Repos\\\" routerLinkActive=\\\"active\\\">Search</a>\\n        <a class=\\\"nav-item nav-link\\\" id=\\\"nav-bookmarks-tab\\\" data-toggle=\\\"tab\\\" role=\\\"tab\\\" routerLink=\\\"Bookmarks\\\" routerLinkActive=\\\"active\\\">Bookmarks</a>\\n      </div>\\n</nav>\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\nimport { GithubService } from './github.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  searchInput;\n\n  constructor(\n    private gitService: GithubService\n  ) {}\n\n  searchRepos(){\n    this.gitService.searchRepos(this.searchInput)\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { GitreposComponent } from './gitrepos/gitrepos.component';\nimport { FormsModule } from '@angular/forms';\nimport { GitrepoComponent } from './gitrepos/gitrepo/gitrepo.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BookmarksComponent } from './bookmarks/bookmarks.component';\nimport { APP_BASE_HREF } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GitreposComponent,\n    GitrepoComponent,\n    BookmarksComponent\n  ],\n  imports: [\n      BrowserModule, HttpClientModule, FormsModule,  AppRoutingModule\n  ],\n  providers: [\n    {provide: APP_BASE_HREF, useValue : '/' }\n  ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\" >\\n        <div *ngFor=\\\"let git of gitRepoList\\\"  class=\\\"col-lg-3 col-md-4 col-sm-6 portfolio-item\\\">\\n            <app-gitrepo [allowBookmark]=\\\"false\\\" [gitRepo]=\\\"git\\\" (bookmarkClicked)=\\\"bookmark($event)\\\" ></app-gitrepo>\\n        </div>\\n        <div *ngIf=\\\"!gitRepoList\\\" class=\\\"col-12 text-center\\\">\\n            <h4>There are no bookmarked repos yet.</h4>\\n        </div>\\n    </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { GithubService } from '../github.service';\n\n@Component({\n  selector: 'app-bookmarks',\n  templateUrl: './bookmarks.component.html',\n  styleUrls: ['./bookmarks.component.css']\n})\nexport class BookmarksComponent implements OnInit {\n  public gitRepoList;\n\n  constructor(\n    private gitService: GithubService\n  ) { }\n\n  ngOnInit() {\n    // Load all bookmarked repos from API (session)\n    this.gitService.loadBookmarks().subscribe((data) => {\n      console.log('data: ', data);\n      this.gitRepoList = data;\n  });\n  }\n\n}\n","export class GitRepoInfo {\n    id: string;\n    name:string;\n    avatar_url: string\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\nimport { GitRepoInfo } from './git-repo-info';\nimport { log } from 'util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GithubService {\n   \n    constructor(private httpClient: HttpClient) { }\n\n    /**\n     * Search and return the github API for the first 10 repositories containing the search term\n     * @param searchTerm\n     */\n    searchRepos(searchTerm): Observable<any[]> {\n        return this.httpClient.get('https://api.github.com/search/repositories?q='+searchTerm+'&page=1&per_page=10'). // https://api.github.com/users/mithunvp/repos`).\n            pipe(\n                map(function(item: any) { console.log('item', item) ;\n                    return item.items;\n                    // .map(function(p) { \n                    //     console.log('p', p) ;\n                    //     return p\n                    //     // <GitRepoInfo>\n                    //     // {\n                    //     //     id: p.id,\n                    //     //     name: p.name,\n                    //     //     avatar_url: p.owner.avatar_url\n                    //     // }\n                    // });\n                })\n            );            \n    }\n\n    /**\n     * Bookmark the selected repo using the API (into the session)\n     * @param gitItem \n     */\n    bookmarkRepo(gitItem: any)  {\n        return this.httpClient.post('api/github', gitItem).toPromise().then(res =>\n            console.log('great!!', res)\n        )\n            .catch(res =>\n                console.log('bad!!', res)\n            );;\n            // https://api.github.com/users/mithunvp/repos`).\n    }\n    \n    /**\n     * Load all bookmarks from API (session)\n     */\n    loadBookmarks(): Observable<GitRepoInfo>{\n        return this.httpClient.get('api/github').\n            pipe(\n                map(function(item: any) { console.log('item', item) ;\n                    return !item ? null : item.map(function(p) { \n                        console.log('p', p) ;\n                        return p\n                        // <GitRepoInfo>\n                        // {\n                        //     id: p.id,\n                        //     name: p.name,\n                        //     avatar_url: p.avatar_url\n                        // }\n                    });\n                })\n            ); \n    }\n}\n","module.exports = \"\"","module.exports = \"\\n    <div class=\\\"card h-100\\\">\\n      <a href=\\\"#\\\"><img class=\\\"card-img-top\\\" [src]=\\\"gitRepo.owner.avatar_url\\\" alt=\\\"\\\"></a>\\n      <div class=\\\"card-body\\\">\\n        <h5 class=\\\"card-title\\\">\\n         {{gitRepo.name}}\\n        </h5>\\n        <p *ngIf=\\\"allowBookmark\\\" class=\\\"card-text\\\">\\n            <button (click)=\\\"bookmark()\\\" class=\\\"btn btn-primary\\\">Bookmark</button>\\n          </p>\\n      </div>\\n    </div>\\n\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { GitRepoInfo } from '../../git-repo-info';\n\n@Component({\n  selector: 'app-gitrepo',\n  templateUrl: './gitrepo.component.html',\n  styleUrls: ['./gitrepo.component.css']\n})\nexport class GitrepoComponent implements OnInit {\n  @Input('gitRepo') gitRepo: GitRepoInfo;\n  @Input('allowBookmark') allowBookmark = true;\n  @Output('bookmarkClicked') bookmarkClicked = new EventEmitter<GitRepoInfo>();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  /**\n   * Emit to the parent that this repo needed to be bookmarked\n   */\n  bookmark() {\n    this.bookmarkClicked.emit(this.gitRepo);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div>\\n    <div class=\\\"container\\\">\\n        <br/>\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-12 col-md-10 col-lg-8\\\">\\n                <form class=\\\"card card-sm\\\">\\n                    <div class=\\\"card-body row no-gutters align-items-center\\\">\\n                        <div class=\\\"col-auto\\\">\\n                            <i class=\\\"fas fa-search h4 text-body\\\"></i>\\n                        </div>\\n                        <!--end of col-->\\n                        <div class=\\\"col\\\">\\n                            <input name=\\\"searchInput\\\" [(ngModel)]=\\\"searchInput\\\" class=\\\"form-control form-control-lg form-control-borderless\\\" type=\\\"search\\\" placeholder=\\\"Search topics or keywords\\\">\\n                        </div>\\n                        <!--end of col-->\\n                        <div class=\\\"col-auto\\\">\\n                            <button (click)=\\\"searchRepos()\\\" class=\\\"btn btn-lg btn-success\\\" type=\\\"submit\\\">Search</button>\\n                        </div>\\n                        <!--end of col-->\\n                    </div>\\n                </form>\\n            </div>\\n            <!--end of col-->\\n        </div>\\n    </div>\\n\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\" >\\n            <div *ngFor=\\\"let git of gitRepoList\\\"  class=\\\"col-lg-3 col-md-4 col-sm-6 portfolio-item\\\">\\n                <app-gitrepo [gitRepo]=\\\"git\\\" (bookmarkClicked)=\\\"bookmark($event)\\\" ></app-gitrepo>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { GithubService } from '../github.service';\nimport { GitRepoInfo } from '../git-repo-info';\n\n@Component({\n    selector: 'app-gitrepos',\n    templateUrl: './gitrepos.component.html',\n    styleUrls: ['./gitrepos.component.css']\n})\nexport class GitreposComponent implements OnInit {\n    gitRepoList = new Array<any>();\n    searchInput;\n    constructor(private gitService: GithubService) { }\n\n    ngOnInit() {\n    }\n\n    /**\n     * Set the result of the repo search from the service to local list\n     */\n    public searchRepos() {\n        this.gitService.searchRepos(this.searchInput).subscribe((data) => {\n            this.gitRepoList = data;\n        });\n    }\n    /**\n     * Calls the service bookmark method with the selected repo as arg\n     * @param gitItem \n     */\n    bookmark(gitItem){\n        this.gitService.bookmarkRepo(gitItem);\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}